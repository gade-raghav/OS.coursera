Basic Commands

ls   - list directories
pwd  - present working directory
cd   - change directory
mkdir- make directory
        to make dir with spaces " mkdir my\ folder\ haha " or " mkdir 'my folder haha'
history - to list all the commands used
clear - to clear screen
cp   - to copy files from one dir to another
        example " cp demo ~/Desktop"
       to copy files having same extensions
        example " cp *.c ~/Desktop"
       to copy a directory to another directory
        example " cp -r demo ~/Desktop"
mv   - to rename a document
        example " mv red.doc blue.doc"
     - to move a document
rm   - to remove a file
     - to remove a folder
        example " rm -r demo" 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
File and Text Manipulation

cat - to view a file
less- to view files, search for a word etc (similar commands used as in vim editor).
head- to view first ten lines of a file.
tail- to view last ten lines of a file.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Searching within files 

grep : We can search for words within the files that match a certain pattern using this.
       example " grep 'word' 'file name' "
               " grep 'word' *.c(or any other extension) :

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Input Output and Pipeline

How this works?
Every command takes input and can produce output. To do this we use I/O streams.There are three streams :
0:stdin (0 is the standard number indicating std input)
1:stdout (1 is the standard number for std out)
2:stderr (2 is the standard number for std error)
We give input to a process by adding things to stdin stream, which flows in the process creates output,adds data to stdout stream,which flows out of the process.



echo - it's an alias for write-output
> - standard output redirector operator
     this helps to redirect output . We can alter it by adding a text file name or anything else.
< - This is standard input redirector, used to get input 
  example : cat < file.txt
>> - The difference between > and >> is that this appends the output to the file name mentioned instead of overwriting.
  example : the following command removes a protected file by redirecting the standard errors to another output.
            rm securefile.txt 2> errors.txt 
  example : the following command uses pipe to take std output and find few words to put into another file.
            cat words.txt | grep st > st_words.txt 
              

Let us suppose we don't want the error messages to be stored in any files, we can redirect them to a special place called /dev/null . This is known as the black hole   which actually is the defention of nothing. 

| - This command is used to take output of one command as input of another command.
  example : Let's suppose we want to search for bluetooth word present in sub directories of /etc.
            ls -al /etc | grep bluetooth 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

User 

sudo - To run commands as root. (super user do - sudo)
su   - To change user. (substitute user - su)

You can view who has access to run sudo by viewing the /etc/group file.(how to read this file sudo:X:123:raghav . Here sudo is command , X means that the  password is  encrypted and stored in separate file , 123 is the group id (OS uses gid instead of group name), , last field is the list of users i.e raghav)

You can view the users on our machine by opening the file named /etc/password.
This file consists of lot more users , most of which are not humans but different processes that are required to be running for user.
file has the following details
root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologini
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
Let's analyse the output.1st line , root is the user , X means the passwd is encrypted and stored in separate file, 0:0 is the user id

------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
Password 

passwd - To change password run this command.

When you set a password it is securely scrambled and stored in /etc/shadow file which can be only read by root.
If you want to force a user to change password you can use -e i.e expire flag with passwd. This expires a user password and will ask them to set a new one next time    they login.
example : sudo passwd -e username 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Adding and Removing users

useradd - To add user. This will set up basic configurations for the user, and set up a home directory.
userdel - To remove a user.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Permissions 

Three different types of permissions in linux.
read   - allows reading contents of a file/folder
write  - allows writing information on a file/folder
execute- allows execution of a program

ls cmnd with -l flag gives this info (the following is the output for better understanding)
-rw-rw-r--. 1 raghavgades raghavgades 5462 Dec 20 11:31 commands
-rw-rw-r--. 1 raghavgades raghavgades  648 Dec 19 13:19 directories
There are 10 bits here.First - indicated that it's a normal file (d indicated directory).Next nine bits are out permissions r-readable w-writable x-executable.grouped 
in sets of three ,first trio refers to permissions of owner then the groups and then all other users present. '-' indicates that the permission is disabled.

Modifying permissions

chmod- to change permissions (change mode -chmod)
       u - for owner
       g - for groups
       o - for others
    example - '+ or -' can be used to give or remove particular permissions.  
              chmod u+x 'file name' 
              this command gives executable rights of the file to owner.    
              chmod u-x 'file name'
              removes rights
              multiple permissions can also be given chmod ugo+rwx 'file name'

The above mentioned method is symbolic method to change permissions , there is another method which is much faster and efficient to change permissions.
numerical equivalent
4 for read or r
2 for write or w
1 for execute or x
 
   example - chmod 756 'file name' 

In the above example the first digit is for owner followed by groups and other respectively. So where did 7, 5 and 6 come from . It's nothing but the sum of the above 
mentioned digits which gives those permissions i.e "7 = 4+2+1 means rwx "

chown- to change owner of a file
     example - sudo chown 'new owner' 'file name'

chgrp- to change group of a file
     example - sudo chgrp 'new group' 'file name'

SetUid,SetGid,Sticky Bit

What if we want a user to do something that requires root privilages but doesn't want to give root privilages to him.There are certain commands for that purpose.
example - after we change password , it gets encrypted and saved in shadow file.This shadow file is owned by root, so how are we able to write into this file if it's owned by root. Thanks to setuid, we can enable files to be run by the permissions of the owner of the file.
You can set it symbolically like this chmod u+s 'file name'
otherwise you can ser it numerically like this chmod 4755 'file name' where 4 is the number to setuid prepended to rest of the permissions.
Similar to that, you can run a file using group permission with setgid. prepend 2 to the rest of the permission or set symbolically.

Stickybit: This bit sticks a file or folder down and makes it so that anyone can write to it but cannot delete anything form it except for the owner or the root.
   example -  list info of dir /tmp . we get the following.
             drwxrwxrwt. 20 root root 4096 Dec 20 13:20 /tmp/ 
             The 't' bit means that it's a sticky bit enabled directory. No one can delete this except the root. Numerical format to enable it is 1 and 't' is the 
             symbolic format to enable this.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Package Manager

Package managers are tools that automates the process of installing removing configuring and upgrading programs. RPM( Redhat Package Manager) is the most popular package management tool and it is used by Red hat based systems like cent,fedora,rhel etc.
Insead of rpm , yum is used because it also downloads and install package dependencies unlike rpm

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Filesystem

(In the following examples assume that we are using usb as the disk we are partitioning and  mounting)


A filesystem is used to keep track files and file storage on a disk. We use ext4 filesystem in linux(there are many others).Disk can be partitioned for multiple uses.
You can run two different os's on same computer because of partiotioning. You can then use two different filesystems on the disk.
When you format a filesystem, it becomes a volume.Volume and partitions are used synonymously but are two different things.
A partition table tells the OS how the disk is partitioned. The table will tell you which partitions you can boot from and howw mush space is allocated to partition .There are two main partition schemes used,MBR(master boot record) and GPT(GUID partition table). These schemes dexide how to structure the information on partitions.
MBR - It is a traditional partition table , and mostly used in windows os. It only lets you have volume sizes of 2TB or less It also uses something called primary partitions.(you can have ony 4 primary partitions.) This is an old standard and.
GPT - You can have volumes greater than 2TB and it ony has one type of partition.You can as many as you want in the disk. Latest BIOS standard called UEFI is used now.
To use UEFI , your disk has to use GPT.
Parted tool is a tool in linux that supports GPT and MBR.Parted can be used in two modes, interactvie and command line.
parted -l  - This command with -l flag lists all the disks that are connected to the system and their partitioning.
sudo parted /dev/usb - This command helps to get into parted tool to partition disk name.
print  - this command prints the partition of the disk (if any) .
mklbl  - this command specifies which partition table you want to use.
mkpart - this command is used to make partition . It requires following information, what type of partition we want to make,what filesystem we want to format and the 
         start of the disk and end of the disk. Partition type is not required for gpt table so we mention primary, however we need to mention primary or logical etc 
         while using mbr partition .
         eg: mkpart primary ext4 1MiB 5GiB
The following command is not used in the parted tool. You need to run it in the terminal.
mkfs   - this command is used to format the partitioin with the filesystem.
         eg: mkfs -t ext4 /dev/usb
CAUTION: Be very carefull while partitioning disk . A small mistake can lead to a big mess. 

In the above mentioned text we've learned about how to partition disk and make a filesystem on it , however we are not ready to read and write files in it. There is one last step to get a usable disk in linux.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 
Mounting

Mounting a filesystem or a disk means to make it accessible to the computer. If we want use USB drive, we mount the file system to a drive.(windows does this automatically.) You might be thinking why can't we cd into /dev/usb and start reading and writing files from it. If you try that , you get a error message saying that /dev/usb is not a directory. To resolve this, we need to create a directory on our computer and mount the filesystem of our usb to this directory.
command : sudo mount /dev/usb /my_usb/
Now if we go to /my_usb we can read and write files to the new filesystem.
Most of the os' does not need mounting as they automatically does this for us when we plug in a device. One or the other way filesystem has to be mounted in order to interact with the os.We can similarly unmount the filesystem. 
command : sudo unmount /dev/usb or sudo unmount /my_usb  ( both will work).When you shutdown your system , disks that were mounted manually are automatically unmounted.Always make sure to unmount before physically disconnecting a drive.In case of USB drive we can run into some interesting errors that are discussed later.
Also keep in mind that when we shutdown computer , the mount point disappears. we can  permanently mount a disk to automatically load up when computer boots. we need to make changes in file called /etc/fstab.
/etc/fstab consists a list of unique device id's with their mount points and a little more information. If we want to automatically mount a file , we can just add an
entry their similar to what is listed.The first feild we need to add is the UUID( Universal Unique ID) of our usb drive.
To get the UUID we can run a command called 
blkid . This will show us the disks that are connected along with their uuid's.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Swap Space

Virtual memory is how our OS provides the physical memory available in or computer(like RAM) to the applications that run on the computer.This makes life easier fo program which needs to access memory since it doesnt have to worry about what portions of memory other programs might be using.It also doesnt have to keep track of weather the data it is using is located in RAM or not.
Basically you have the liberty to use more memory than what you have physically installed. To do this, it dedicates an area of hard disk to use as a storage base for blocks of data called pages.
When a particular block of data isn't being used, it gets evicted(copied to the hard drive).This is because accessing data on RAM is faster .Therefore, the OS keeps most accessed blocks of data on RAM and other on the hard drive which can be retrieved.But it has to read from hard drive which is relatively slow. Every OS has it's way of maintaing this kind of memory management scheme, So how does ir work on Linux?
In linux , this particular area dedicated to hard drive used for virtual memory is known as swap space.
How to make swap space? 
Use parted tool on a drive you want eg. /dev/myusb
         sudo parted /dev/myusb 
Make linux swap partition in the following way 
         mkpart primary linux-swap 5Gib 100% (100% implies to use the remaining space as swap)
Now lets quit out of parted tool.We need to specify to OS that the partition you made is a swap partition.We use a mkswp command.
         sudo mkswp /dev/myusb 
Finally one more command needs to be run on the system to enable the swap space created.
         sudo swapon /dev/myusb
If we want to automatically mount swap space everytime system boots up, just add a swap entry to the /etc/fstab file.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------ 








